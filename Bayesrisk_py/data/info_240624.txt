#PARAMETERS ESTIMATION
n_q = np.array([5, 4, 3, 2, 1]) # number of Qubits - fixed in this implementation
dim = 2**n_q # dimension of Hilbert space
p = [create_pauli_basis(n_qi) for n_qi in n_q] # create Pauli basis
M = [1, 4, 16, 64, 256, 1024] # number of measurements
L = 1000 # number of sampling points

# Run parallelized estimaiton of bayes risk
out += [Parallel(n_jobs=cores)(delayed(function)(ind_r, n_m, ind_d, 'pauli') for ind_r in np.arange(L))]
out += [Parallel(n_jobs=cores)(delayed(function)(ind_r, n_m, ind_d, 'rand') for ind_r in np.arange(L))]
out += [Parallel(n_jobs=cores)(delayed(function)(ind_r, n_m, ind_d, 'rand2') for ind_r in np.arange(L))]
out += [Parallel(n_jobs=cores)(delayed(function)(ind_r, n_m, ind_d, 'randsep') for ind_r in np.arange(L))]